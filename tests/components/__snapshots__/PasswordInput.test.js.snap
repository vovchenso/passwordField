// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders with change callback 1`] = `
<View
  style={
    Object {
      "position": "relative",
      "width": "100%",
    }
  }
>
  <TextInput
    onBlur={[Function]}
    onChangeText={[Function]}
    onFocus={[Function]}
    placeholder={undefined}
    secureTextEntry={true}
    style={
      Array [
        Object {
          "borderColor": "gray",
          "borderRadius": 5,
          "borderWidth": 1,
          "color": "#a0a0a0",
          "height": 40,
          "padding": 5,
        },
        false,
        false,
      ]
    }
  />
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits="button"
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "transparent",
        "bottom": 0,
        "flex": 1,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 12,
          },
          Object {
            "color": "#000",
          },
        ]
      }
    >
      SHOW
    </Text>
  </View>
</View>
`;

exports[`renders with placeholder 1`] = `
<View
  style={
    Object {
      "position": "relative",
      "width": "100%",
    }
  }
>
  <TextInput
    onBlur={[Function]}
    onChangeText={[Function]}
    onFocus={[Function]}
    placeholder="TEST"
    secureTextEntry={true}
    style={
      Array [
        Object {
          "borderColor": "gray",
          "borderRadius": 5,
          "borderWidth": 1,
          "color": "#a0a0a0",
          "height": 40,
          "padding": 5,
        },
        false,
        false,
      ]
    }
  />
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits="button"
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "transparent",
        "bottom": 0,
        "flex": 1,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 12,
          },
          Object {
            "color": "#000",
          },
        ]
      }
    >
      SHOW
    </Text>
  </View>
</View>
`;

exports[`renders with placeholder and callback 1`] = `
<View
  style={
    Object {
      "position": "relative",
      "width": "100%",
    }
  }
>
  <TextInput
    onBlur={[Function]}
    onChangeText={[Function]}
    onFocus={[Function]}
    placeholder="TEST"
    secureTextEntry={true}
    style={
      Array [
        Object {
          "borderColor": "gray",
          "borderRadius": 5,
          "borderWidth": 1,
          "color": "#a0a0a0",
          "height": 40,
          "padding": 5,
        },
        false,
        false,
      ]
    }
  />
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits="button"
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "transparent",
        "bottom": 0,
        "flex": 1,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 12,
          },
          Object {
            "color": "#000",
          },
        ]
      }
    >
      SHOW
    </Text>
  </View>
</View>
`;

exports[`renders without props 1`] = `
<View
  style={
    Object {
      "position": "relative",
      "width": "100%",
    }
  }
>
  <TextInput
    onBlur={[Function]}
    onChangeText={[Function]}
    onFocus={[Function]}
    placeholder={undefined}
    secureTextEntry={true}
    style={
      Array [
        Object {
          "borderColor": "gray",
          "borderRadius": 5,
          "borderWidth": 1,
          "color": "#a0a0a0",
          "height": 40,
          "padding": 5,
        },
        false,
        false,
      ]
    }
  />
  <View
    accessibilityComponentType="button"
    accessibilityLabel={undefined}
    accessibilityTraits="button"
    accessible={true}
    collapsable={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "transparent",
        "bottom": 0,
        "flex": 1,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "fontSize": 12,
          },
          Object {
            "color": "#000",
          },
        ]
      }
    >
      SHOW
    </Text>
  </View>
</View>
`;
